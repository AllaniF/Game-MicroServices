
services:
  postgres:
    image: postgres:latest
    container_name: mypostgresdb
    ports:
      - "5002:5002"
    environment:
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: EntityDb
      POSTGRES_PORT: 5002
    command: [ "postgres", "-p", "5002" ]  # Explicitly set port in PostgreSQL
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./Entity.sql:/docker-entrypoint-initdb.d/init.sql

  map-db:
    image: postgres:latest
    container_name: map-postgres
    ports:
      - "5004:5004"
    environment:
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: postgres
      POSTGRES_PORT: 5004  # Ensure PostgreSQL uses 5004 internally
    command: [ "postgres", "-p", "5004" ]  # Explicitly set port in PostgreSQL
    volumes:
      - map_data:/var/lib/postgresql/data
      - ./map.sql:/docker-entrypoint-initdb.d/map.sql

  game-state-service:
    build:
      context: Game-State-Service
      dockerfile: Dockerfile-gamestateservice
    container_name: Game-State-Service
    ports:
      - "8001:8001"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - rabbitmq

  entity-service:
    build:
      context: Entity-Service
      dockerfile: Dockerfile-entityservice
    container_name: Entity-Service
    ports:
      - "8002:8002"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://mypostgresdb:5002/EntityDb  # Connection to PostgreSQL container
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - postgres
      - rabbitmq

  fight-service:
    build:
      context: Fight-Service
      dockerfile: Dockerfile-fightservice
    container_name: Fight-service
    ports:
      - "8003:8003"

  map-service:
    build:
      context: Map-Service
      dockerfile: Dockerfile-mapservice
    container_name: Map-service
    ports:
      - "8004:8004"
    depends_on:
      - rabbitmq


  redis:
    build:
      context: Game-State-Service
      dockerfile: Dockerfile-redis
    container_name: redis-server
    ports:
      - "6379:6379"

  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfile-rabbitmq
    container_name: myrabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile-frontend
    container_name: myfrontend
    ports:
      - "5173:5173"  # Change si n√©cessaire
    depends_on:
     - entity-service

  log-db:
    image: postgres:latest
    container_name: log-postgres
    ports:
      - "5005:5005"
    environment:
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: LogDb
      POSTGRES_PORT: 5005  # Ensure PostgreSQL uses 5005 internally
    command: [ "postgres", "-p", "5005" ]  # Explicitly set port in PostgreSQL
    volumes:
      - log_data:/var/lib/postgresql/data
      - ./Log.sql:/docker-entrypoint-initdb.d/Log.sql

  log-service:
    build:
      context: Log-Service
      dockerfile: Dockerfile-logservice
    container_name: Log-Service
    ports:
      - "8005:8005"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://log-postgres:5005/LogDb  # Connection to PostgreSQL container
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - log-db
      - rabbitmq


volumes:
  db_data:
  rabbitmq_data:
  redis-data:
  map_data:
  log_data:
